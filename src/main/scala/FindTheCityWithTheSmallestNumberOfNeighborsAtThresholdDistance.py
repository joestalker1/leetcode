class Solution:
    def findTheCity(self, n, edges, distanceThreshold):
        dist = [[float('inf')] * n for _ in range(n)]
        for s, e, w in edges:
            if w > distanceThreshold:
                continue
            dist[s][e] = w
            dist[e][s] = w
            dist[s][s] = 0
            dist[e][e] = 0
        for k in range(n):
            for s in range(n):
                for e in range(n):
                    if dist[s][k] + dist[k][e] <= distanceThreshold:
                        dist[s][e] = min(dist[s][e], dist[s][k] + dist[k][e])
        min_num = float('inf')
        city = 0
        for c in range(n):
            cities = sum([1 for v in dist[c] if v != float('inf')])
            if min_num >= cities:
                min_num = cities
                city = c
        return city


sol = Solution()
print(sol.findTheCity(23,
                      [[1, 3, 6289], [0, 14, 8478], [10, 18, 2195], [21, 22, 9476], [3, 17, 4172], [17, 21, 60],
                       [13, 21, 1981], [20, 22, 3303], [9, 22, 9220], [0, 21, 6194], [14, 21, 7898], [4, 13, 8930],
                       [10, 15, 3780], [14, 20, 4386], [0, 3, 618], [3, 8, 2749], [4, 11, 9083], [4, 9, 8239],
                       [14, 19, 3820], [4, 5, 6725], [10, 13, 4485], [8, 12, 6901], [5, 17, 6530], [5, 21, 4457],
                       [1, 16, 8094], [13, 22, 1602], [8, 17, 2124], [0, 1, 3059], [13, 17, 9168], [2, 16, 261],
                       [11, 19, 7438], [10, 20, 735], [4, 6, 8003], [18, 19, 3512], [4, 20, 6455], [2, 11, 8826],
                       [17, 19, 5510], [4, 14, 3990], [3, 7, 1541], [17, 20, 1264], [0, 15, 699], [12, 20, 6925],
                       [5, 19, 7239], [7, 11, 3094], [8, 11, 2839], [7, 18, 9754], [4, 18, 8225], [3, 16, 3113],
                       [8, 15, 8352], [0, 16, 6305], [10, 16, 8550], [2, 12, 5908], [11, 12, 3229], [8, 18, 3813],
                       [6, 13, 5894], [12, 14, 9602], [1, 17, 1057], [0, 9, 5588], [18, 21, 849], [1, 6, 7512],
                       [7, 15, 725], [3, 19, 2897], [2, 7, 2420], [7, 10, 4679], [0, 8, 7687], [14, 22, 706],
                       [3, 21, 9558], [6, 11, 8210], [3, 18, 1063], [5, 22, 9265], [10, 12, 6493], [8, 20, 1508],
                       [0, 18, 6553], [10, 22, 8385], [7, 19, 9379], [2, 14, 4937], [3, 10, 6462], [12, 17, 4390],
                       [6, 15, 5771], [3, 15, 7711], [0, 10, 805], [12, 22, 9048], [1, 8, 7818], [12, 18, 286],
                       [0, 17, 6994], [5, 13, 4991], [14, 17, 9645], [2, 19, 5199], [5, 11, 2448], [13, 14, 9767],
                       [5, 20, 9656], [16, 17, 9106], [13, 20, 4552], [14, 18, 1080], [6, 20, 9948], [0, 19, 5915],
                       [2, 3, 6802], [11, 13, 6407], [4, 16, 8517], [8, 14, 388], [7, 8, 9432], [4, 15, 9532],
                       [9, 11, 1860], [7, 16, 606], [8, 16, 9402], [3, 13, 8677], [1, 13, 236], [8, 9, 1654],
                       [11, 16, 5441], [1, 15, 5517], [5, 10, 6035], [7, 22, 9026], [15, 17, 565], [5, 9, 6065],
                       [13, 15, 9548], [14, 15, 1216], [2, 10, 7946], [4, 12, 1373], [0, 22, 8841], [3, 11, 7311],
                       [16, 19, 5481], [12, 21, 8194], [3, 5, 8915], [2, 17, 56], [6, 17, 2634], [12, 16, 5326],
                       [16, 18, 5913], [3, 22, 3506], [1, 14, 2395], [1, 22, 9507], [11, 21, 2429], [3, 12, 9660],
                       [7, 20, 1768], [3, 20, 6619], [8, 19, 5198], [12, 13, 8334], [15, 22, 6896], [8, 13, 5899],
                       [0, 12, 5594], [16, 21, 4257], [1, 4, 9976], [1, 2, 6038], [4, 22, 617], [0, 13, 1040],
                       [12, 19, 4042], [6, 9, 4351], [10, 14, 6506], [9, 19, 9018], [9, 13, 4651], [18, 22, 9401],
                       [6, 19, 1368], [2, 8, 1228], [6, 22, 2792], [0, 11, 4380], [2, 20, 6780], [5, 15, 1365],
                       [2, 15, 2069], [19, 22, 4628], [16, 22, 9025], [17, 18, 4306], [11, 14, 3848], [15, 21, 3451],
                       [1, 21, 1620], [7, 17, 4541], [10, 11, 7872], [11, 17, 772], [2, 21, 8392], [17, 22, 4937],
                       [2, 5, 3341], [1, 20, 8908], [5, 14, 1231], [15, 16, 9023], [19, 20, 5169], [0, 2, 5566],
                       [5, 6, 4851], [7, 12, 8457], [15, 18, 2184], [9, 10, 578], [16, 20, 7246], [14, 16, 5963],
                       [0, 5, 611], [3, 6, 471], [11, 20, 5169], [7, 9, 6841], [13, 16, 2684], [1, 19, 9126],
                       [3, 14, 666], [6, 18, 9640], [9, 18, 8616], [13, 18, 6957], [6, 7, 3021], [2, 6, 3235],
                       [0, 20, 3815], [9, 15, 1881], [0, 7, 9625], [1, 7, 2131], [5, 12, 9613], [4, 19, 8295],
                       [0, 4, 2007], [1, 18, 4368], [1, 12, 7510], [3, 9, 3217], [18, 20, 906], [7, 21, 5920],
                       [1, 10, 7474], [7, 13, 5488], [5, 8, 5812], [5, 18, 3601], [5, 16, 154], [2, 9, 229],
                       [10, 21, 8008], [9, 17, 529], [11, 22, 2694], [9, 14, 4151], [6, 16, 9044], [4, 17, 654],
                       [6, 10, 151], [11, 15, 3770], [6, 8, 1387], [9, 21, 8591], [12, 15, 2840], [2, 22, 576],
                       [9, 16, 8654], [4, 7, 3281], [4, 8, 3432], [3, 4, 7258], [1, 5, 4732], [2, 18, 3982],
                       [10, 19, 8037], [5, 7, 8289], [19, 21, 6085], [13, 19, 5324]],
                      6423))
print(sol.findTheCity(6,
                      [[0, 3, 5], [2, 3, 7], [0, 5, 2], [0, 2, 5], [1, 2, 6], [1, 4, 7], [3, 4, 4], [2, 5, 5],
                       [1, 5, 8]], 8279))  # 5
print(sol.findTheCity(n=5, edges=[[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]],
                      distanceThreshold=2))  # 0
print(sol.findTheCity(n=4, edges=[[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]], distanceThreshold=4))  # 3
