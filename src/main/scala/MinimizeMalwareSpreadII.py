from collections import Counter

class Solution:
    def minMalwareSpread(self, graph, initial):
        n = len(graph)
        clean = set(range(n)) - set(initial)

        def dfs(v, seen):
            for u,x in enumerate(graph[v]):
                if u not in seen and u in clean and x:
                    seen.add(u)
                    dfs(u, seen)

        infected_by = {u: [] for u in clean}
        for v in initial:
            seen = set()
            dfs(v, seen)
            for u in seen:
                infected_by[u].append(v)
        infected = Counter()
        for u in infected_by.keys():
            if len(infected_by[u]) == 1:
                infected[infected_by[u][0]] += 1
        best = [-1, min(initial)]
        for v,count in infected.items():
            if best[0] < count or best[0] <= count and v > best[1]:
                best = [count, v]
        return best[1]

sol = Solution()
print(sol.minMalwareSpread([[1,1,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1]], [3,0]))#0
print(sol.minMalwareSpread(graph=[[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]], initial=[0, 1]))#1
print(sol.minMalwareSpread(graph=[[1, 1, 0], [1, 1, 1], [0, 1, 1]], initial=[0, 1]))#1
print(sol.minMalwareSpread(graph=[[1, 1, 0], [1, 1, 0], [0, 0, 1]], initial=[0, 1]))#0
