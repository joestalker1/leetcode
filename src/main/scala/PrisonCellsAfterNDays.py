class Solution:
    def prisonAfterNDays(self, cells, N):
        new_cells = [0] * 8
        if N > 14:
            N = N % 14 + 14
        else:
            N = N % 14

        for day in range(N):
            for i in range(1, 7):
                new_cells[i] = 0
                if cells[i - 1] == cells[i + 1]:
                    new_cells[i] = 1
            new_cells[0] = 0
            new_cells[7] = 0
            cells, new_cells = new_cells, cells
        if N % 2 == 0:
            return cells
        return cells


# 0- [0, 1, 1, 0, 0, 0, 0, 0]
# 1- [0, 0, 0, 0, 1, 1, 1, 0]
# 2- [0, 1, 1, 0, 0, 1, 0, 0]
# 3- [0, 0, 0, 0, 0, 1, 0, 0]
# 4- [0, 1, 1, 1, 0, 1, 0, 0]
# 5- [0, 0, 1, 0, 1, 1, 0, 0]
# 6- [0, 0, 1, 1, 0, 0, 0, 0]
# 7- [0, 0, 0, 0, 0, 1, 1, 0]
# 8- [0, 1, 1, 1, 0, 0, 0, 0]
# 9- [0, 0, 1, 0, 0, 1, 1, 0]
# 10- [0, 0, 1, 0, 0, 0, 0, 0]
# 11- [0, 0, 1, 0, 1, 1, 1, 0]
# 12- [0, 0, 1, 1, 0, 1, 0, 0]
# 13- [0, 0, 0, 0, 1, 1, 0, 0]
# 14- [0, 1, 1, 0, 0, 0, 0, 0]
# 15- [0, 0, 0, 0, 1, 1, 1, 0]
# 16- [0, 1, 1, 0, 0, 1, 0, 0]
# 17- [0, 0, 0, 0, 0, 1, 0, 0]
# 18- [0, 1, 1, 1, 0, 1, 0, 0]
# 19- [0, 0, 1, 0, 1, 1, 0, 0]
# 20- [0, 0, 1, 1, 0, 0, 0, 0]
# 21- [0, 0, 0, 0, 0, 1, 1, 0]
# 22- [0, 1, 1, 1, 0, 0, 0, 0]
# 23- [0, 0, 1, 0, 0, 1, 1, 0]
# 24- [0, 0, 1, 0, 0, 0, 0, 0]
# 25- [0, 0, 1, 0, 1, 1, 1, 0]
# 26- [0, 0, 1, 1, 0, 1, 0, 0]
# 27- [0, 0, 0, 0, 1, 1, 0, 0]
# 28- [0, 1, 1, 0, 0, 0, 0, 0]

sol = Solution()
print(sol.prisonAfterNDays([1, 0, 0, 1, 0, 0, 0, 1], 826))  # [0,1,1,0,1,1,1,0]
print(sol.prisonAfterNDays([1, 0, 0, 1, 0, 0, 0, 1], 28))
# print(sol.prisonAfterNDays([0,1,0,1,1,0,0,1], 1000000000))
