Here is a piece of pseudocode that demonstrates an interaction for one test set.
Suppose there are three test cases in this test set.
The pseudocode first reads an integer t, representing the number of test cases.
Then the first test case begins.
Suppose the correct answer P is 9 for the first test case.
The pseudocode first reads three integers a, b, and n, representing the guessing range and maximum number of tries,
respectively, and then outputs a guess 30.
Since 30 is greater than 9, the string TOO_BIG is received through stdin from the judge.
Then the pseudocode guesses 5 and receives TOO_SMALL in response.
The guess 10 is subsequently printed to stdout which is again too big.
Finally the pseudocode guesses 9, and receives CORRECT because 9 is the correct answer.

  t = readline_int()         // reads 3 into t
  a, b = readline_two_int()  // reads 0 into a and 30 into b; note that 0 30 is one line
  n = readline_int()         // reads 30 into n
  printline 30 to stdout     // guesses 30
  flush stdout
  string s = readline()      // because 30 > 9, reads TOO_BIG into s
  printline 5 to stdout      // guesses 5
  flush stdout
  s = readline()             // reads TOO_SMALL into s since 5 < 9
  printline 10 to stdout     // guesses 10
  flush stdout
  s = readline()             // reads TOO_BIG into s since 10 > 9
  printline 9 to stdout      // guesses 9
  flush stdout
  s = readline()             // reads CORRECT into s
The second test case shows what happens if the code continues to read from stdin after the judge stops sending info.
In this example, the contestant guesses 31, which is outside the range (0, 30].
As a result, the judging system sends WRONG_ANSWER to the input stream of the pseudocode
and stops sending anything after that.
However, after reading WRONG_ANSWER into string s, the code continues to read for the next test case.
Since there is nothing in the input stream (judge has stopped sending info),
the code hangs and will eventually receive a Time Limit Exceeded Error.

  a, b = readline_two_int()  // reads 0 into a and 30 into b; note that 0 30 is one line
  n = readline_int()         // reads 30 into n
  printline 31 to stdout     // guesses 31
  flush stdout
  string s = readline()      // reads WRONG_ANSWER
  a, b = readline_two_int()  // tries to read for the third test case but hangs since
                             // judge has stopped sending info to stdin
If the code in the example above exits immediately after reading WRONG_ANSWER,
it will receive a Wrong Answer judgment instead.

  a, b = readline_two_int()  // reads 0 into a and 30 into b; note that 0 30 is one line
  n = readline_int()         // reads 30 into n
  printline 31 to stdout     // guesses 31
  flush stdout
  string s = readline()      // reads WRONG_ANSWER
  exit                       // receives a Wrong Answer judgment
Local Testing Tool
To better facilitate local testing, we provide you the following script.
Instructions are included inside.
You are encouraged to add more test cases for better testing.
Please be advised that although the testing tool is intended to simulate the judging system,
it is NOT the real judging system and might behave differently.

If your code passes the testing tool but fails the real judge, please check here to make sure that you are
using the same compiler as us.


