class Solution:
    def shipWithinDays(self, weights: List[int], D: int) -> int:
        lo = 0
        hi = 25000001
        total = sum(weights)

        def can_ship(total, w):
            # check if we ship all packages for <= D
            d = 0
            daily_load = 0
            for weight in weights:
                if weight > w:
                    return False
                if daily_load + weight <= w:
                    daily_load += weight
                else:
                    daily_load = weight
                    d += 1
            # increment for last iteration
            d += 1
            return d <= D

        while lo < hi:
            m = lo + (hi - lo) // 2
            # try to bound load from up
            if can_ship(total, m):
                hi = m
            else:
                lo = m + 1
        return lo


sol = Solution()
#682
#print(sol.shipWithinDays([59,468,1,380,122,368,175,383,398,422,175,403,11,415,62,379,418,406,485,410,440,364,329,8,235,461,308,69,347,37,450,187,382,44,209,463,393,478,162,376,88,335,70,3,233,375,54,412,270,299,155,243,195,423,402,464,6,63,473,149,62,162,320,490,27,30,226,488,451,18,85,179,303,425,333,210,128,422,334,475,387,379,81,196,310,48,16,171,472,35,103,434,61,498,195,168,167,394,254,99,190,316,393,40,397,170,437,442,291,323,415,336,143,400,352,42,201,28,233,43,142,81,24,378,384,156,250,376,172,493,179,500,89,104,69,320,108,238,89,245,478,242,344,47,112,188,383,10,488,9,471,430,129,1,154,344,235,456,29,115,9,394,192,12,349,415,101,398,383,175,465,267,206,71,113,448,205,202,254,221,336,425,470,455,344,172,425,417,291,190,24,240,14,397,61,246,128,232,189,210,186,163,33,386,258,50,326,412,134,19,141,158,459,403,124,99,344,269,383,151,419,495,44,295,331,59,71,386,408,79,214,217,425,189,134,232,294,232,444,198,488,21,457,118,471,256,95,428,447,112,238,408,391,270,335,244,13,402,69,121,357,221,463,113,329,193,483,384,182,380,178,263,458,422,265,439,252,222,138,88,47,465,117,91,291,107,391,239,19,108,443,497,357,432,12,252,457,96,264,210,118,395,116,445,60,361,193,363,448,435,245,190,263,169,376,381,168,403,196,477,281,16,33,84,138,10,213,434,373,464,413,351,167,411,54,134,90,102,46,41,25,270,252,383,380,499,3,128,17,392,144,433,447,383,219,262,363,82,463,461,214,207,255,398,104,306,469,385,36,202,490,350,370,207,156,153,396,155,219,298,430,480,1,415,278,55,418,353,60,169,164,43,91,489,1,7,309,159,208,246,283,140,247,204,387,15,412,182,409,61,431,394,147,150,62,423,165,298,333,467,293,226,291,187,188,368,483,234,459,386,103,374,302,320,492,277,25,21,36,149,178,78,359,457,101,139,491,266,64,352,353,471,55,265,105,101,281,286,5,27,165,360,114,344,262,266,290,464,451,209,265,371,59,453,224,465,463,261,1,295,475,71,308,1,53,58,355,470,222,242,364,275,223,484,294,8,125,75,155,469,141,319,377,258,161,374,89,52,165,206,366,6], 256))
#print(sol.shipWithinDays([59,468,1,380,122,368,175,383,398,422,175,403,11,415,62,379,418,406,485,410,440,364,329,8,235,461,308,69,347,37,450,187,382,44,209,463,393,478,162,376,88,335,70,3,233,375,54,412,270,299,155,243,195,423,402,464,6,63,473,149,62,162,320,490,27,30,226,488,451,18,85,179,303,425,333,210,128,422,334,475,387,379,81,196,310,48,16,171,472,35,103,434,61,498,195,168,167,394,254,99,190,316,393,40,397,170,437,442,291,323,415,336,143,400,352,42,201,28,233,43,142,81,24,378,384,156,250,376,172,493,179,500,89,104,69,320,108,238,89,245,478,242,344,47,112,188,383,10,488,9,471,430,129,1,154,344,235,456,29,115,9,394,192,12,349,415,101,398,383,175,465,267,206,71,113,448,205,202,254,221,336,425,470,455,344,172,425,417,291,190,24,240,14,397,61,246,128,232,189,210,186,163,33,386,258,50,326,412,134,19,141,158,459,403,124,99,344,269,383,151,419,495,44,295,331,59,71,386,408,79,214,217,425,189,134,232,294,232,444,198,488,21,457,118,471,256,95,428,447,112,238,408,391,270,335,244,13,402,69,121,357,221,463,113,329,193,483,384,182,380,178,263,458,422,265,439,252,222,138,88,47,465,117,91,291,107,391,239,19,108,443,497,357,432,12,252,457,96,264,210,118,395,116,445,60,361,193,363,448,435,245,190,263,169,376,381,168,403,196,477,281,16,33,84,138,10,213,434,373,464,413,351,167,411,54,134,90,102,46,41,25,270,252,383,380,499,3,128,17,392,144,433,447,383,219,262,363,82,463,461,214,207,255,398,104,306,469,385,36,202,490,350,370,207,156,153,396,155,219,298,430,480,1,415,278,55,418,353,60,169,164,43,91,489,1,7,309,159,208,246,283,140,247,204,387,15,412,182,409,61,431,394,147,150,62,423,165,298,333,467,293,226,291,187,188,368,483,234,459,386,103,374,302,320,492,277,25,21,36,149,178,78,359,457,101,139,491,266,64,352,353,471,55,265,105,101,281,286,5,27,165,360,114,344,262,266,290,464,451,209,265,371,59,453,224,465,463,261,1,295,475,71,308,1,53,58,355,470,222,242,364,275,223,484,294,8,125,75,155,469,141,319,377,258,161,374,89,52,165,206,366,6],256))
#693
#print(sol.shipWithinDays([299,329,425,288,97,181,294,410,220,116,150,48,228,131,304,102,341,487,65,70,419,270,425,167,131,304,376,101,319,407,361,299,146,440,2,355,402,443,191,274,397,347,422,484,292,231,109,320,403,338,252,183,435,112,107,405,302,411,57,283,463,291,256,231,163,466,274,490,341,465,89,397,399,481,217,201,431,343,493,239,83,129,373,496,137,490,419,482,216,290,389,250,453,339,48,208,170,473,77,222,355,55,466,233,88,280,9,305,184,91,22,278,17,260,201,466,150,85,25,452,156,373,163,428,429,456,91,192,396,104,185,401,202,250,286,496,287,207,53,14,75,308,222,24,98,179,122,256,29,11,241,306,82,84,39,75,75,141,412,378,83,464,460,158,388,125,59,232,196,15,378,111,453,329,348,172,113,103,282,146,26,150,144,72,126,496,61,135,264,54,427,3,177,200,401,338,269,232,467,497,304,495,121,353,489,346,352,407,262,350,176,185,65,138,253,119,409,328,354,482,451,27,312,24,218,479,168,350,87,376,313,89,145,15,435,66,111,28,331,375,453,55,264,351,355,157,404,93,346,56,281,18,436,417,232,42,380,276,453,411,480,67,457,78,221,407,415,16,383,410,496,227,151,91,191,126,447,349,445,392,301,112,434,78,243,463,98,304,285,224,425,324,287,451,248,491,252,299,61,218,434,312,39,191,34,223,164,5,117,261,173,376,94,209,25,74,329,493,330,166,304,345,331,338,116,15,240,17,232,280,174,301,98,130,464,151,237,360,99,45,137,446,471,211,462,378,15,131,49,495,157,457,437,426,31,239,72,100,283,78,123,441,281,456,53,137,300,152,489,1,176,309,416,2,131,299,420,59,159,331,207,422,437,96,240,167,18,29,101,121,253,328,48,74,354,346,351,399,181,289,299,407,224,157,156,243,205,483,96,396,109,268,236,297,32,311,374,248,15,155,149,26,500,110,107,140,285,402,58,442,442,362,460,288,318,269,4,136,374,75,418,474,258,398,70,228,33,94,282,306,233,445,95,199,498,401,429,354,283,377,496,238,92,419,387,438,242,437,433,442,81,11,415,28,336,235,3,431,105,346,156,56,439,8,300,224,454,311,261,164,146,301,180,449,468,97,121,384,400,10,165,443,422,304,430,26,5,421,398,139,79,341,413,418,270,203,7,174,112,170,135,22,172,476,438,357,27,223,236,374,237,263,258,65,437,445,215,96,80,375,228,15,310,470,83,80,212,374,200,240,93,109,415,420,453,125,7,205,276,437,486,237,324,324,226,495,275,474,438,227,2,441,288,303,465,78,416,399], 289))
#print(sol.shipWithinDays([1,2,3,4,5,6,7,8,9,10], 10))#10
print(sol.shipWithinDays(weights = [1,2,3,1,1], D = 4))#3
print(sol.shipWithinDays(weights = [3,2,2,4,1,4], D = 3))#6
print(sol.shipWithinDays(weights = [1,2,3,4,5,6,7,8,9,10], D = 5))#15